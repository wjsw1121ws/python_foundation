#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    @Description: 函数的参数
    @ClassName: 函数参数
    @Author: changchun_wu
    @Date: 2019/4/1 23:30
    @Version: 1.0 
"""


##########
##########内存空间的开辟和释放
# 参数在未赋值的时候不会分配内存空间,只有在调用的时候才会分配内存空间
# 当函数运行完成,内存空间会被释放

##########传参方式
# 位置参数: 传参时按照函数中定义的参数的顺序进行赋值
# 关键字参数: 传参时根据函数中定义的参数的名称进行传值(可以不按照先后顺序)
# 参数个数: 调用函数时,传参要和函数的参数个数相同
# 参数顺序: 如果传参即使用位置和使用关键字参数,则位置参数必须在关键字左边

##########默认参数
# 默认值不设值: 如果默认参数不赋值,那么使用默认参数
# 给默认值设值: 如果默认参数赋值,那么新值覆盖默认值

##########参数组传参
# 不传参: 使用参数组可以不传参,则返回的是一个空的元组/字典
# 多个参数: 传参是多个的时候会默认将参数全部赋值给参数组放入元组/字典中
# 可迭代数据类型: 传入参数是列表/元组/字典类型会默认当一个参数放入元组/字典中
# 参数组的形式: 传入的参数使用参数组的形式,会遍历(可迭代数据类型)参数组中的数据并放入元组/字典中

##########
# 位置参数
def test01(x, y, z):
    print(x)
    print(y)
    print(z)


test01(1, 2, 3)
print('\n----------------------\n')


# 关键字参数
def test02(x, y, z):
    print(x)
    print(y)
    print(z)


test02(z=3, x=1, y=2)
print('\n----------------------\n')

# 即使用位置参数有使用关键字参数
test02(1, z=3, y=2)
print('\n----------------------\n')


# 默认参数
def test03(x, tt='func'):
    print(x)
    print(tt)


test03(1)  # 如果默认参数不赋值,那么使用默认参数
test03(1, 'func1')  # 如果默认参数赋值,那么新值覆盖默认值
print('\n----------------------\n')


# 参数组   **{}字典, *[]列表
def test(x, *args):
    print(x)
    print(args)


# 使用参数组可以不传参,则返回的是一个空的元组
test(1)
print('----------------------')
# 传参是多个的时候会默认将参数全部赋值给参数组放入元组中
test(1, 2, 3, 4, 5, 6)
print('----------------------')
# 传入参数是列表/元组/字典类型会默认当一个参数放入元组中
test(1, [2, 3, 4, 5, 6, 7, 8])
print('----------------------')
# 传入的参数使用参数组的形式,会遍历(可迭代数据类型)参数组中的数据并放入元组中
test(1, *[2, 3, 4, 5, 6])
print('\n----------------------\n')


def test(x, **kwargs):
    print(x)
    print(kwargs)


# 使用参数组可以不传参,则返回的是一个空的字典
test(1)
print('----------------------')
# 传参是多个的时候会默认将参数全部赋值给参数组放入字典中
test(1, y=2, z=3, m=4, n=5)
print('----------------------')
# 传入参数是列表/元组/字典类型会默认当一个参数放入字典中
test(1, k1='a', k2=[2, 3, 4], k3=(1, 2, 3))
print('----------------------')
# 传入的参数使用参数组的形式,会遍历(可迭代数据类型)参数组中的数据并放入字典中
test(1, **{'k1': 2, 'k2': 3, 'k3': 4})
print('\n----------------------\n')


def test6(x, *args, **kwargs):
    print(x)
    print(args)
    print(kwargs)


test6(1, 2, 3, 4, 5, m=6, z=7)
print('----------------------')
test6(1, *['a', 'b', 'c'], **{'k1': 'M', 'k2': 'N', 'k3': 'Y', 'k4': 'Z'})
print('\n----------------------\n')
